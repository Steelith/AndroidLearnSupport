<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="textFromFile">
    	Create a new resources .xml file in /res/values like a copy of strings.xml\n
    	put a new resource with known parameter, like "textFromFile" and later yours text\n
        Assign a value "textView" to our textBox in xml\n
            <b>TextView textView = (TextView) findViewById(R.id.defaultText);</b>\n
        Set value "textView" from file to our object.\n
            <b>textView.setText(R.string.textFromFile);</b>\n
    </string>
    <string name="Assign_method_to_button">
        Create a method in desired activity\n
        Find in .xml properties and options "onClick" on button\n
        Choose created method.\n
    </string>
    <string name="open_new_activity">
        Create method which opens ActivityName\n
            <b>public void methodName (View view) {</b>\n
            <b>Intent intentName = new Intent(this, ActivityName.class);</b>\n
            <b>startActivity(intentName);</b>\n
        Apply this method to onClick properties in .xml\n
    </string>
    <string name="remember_values_from_activity">
        In main activity create constant to hold string code (to recognise each values)\n
            <b>public static final String MESSAGE_KEY = "Value from main activity";\n</b>
        Create intent to open new activity\n
            <b>Intent intentName = new Intent(this, ActivityName.class);\n</b>
        Read value from main activity to some EditText\n
            <b>EditText editText = (EditText) findViewById(R.id.editText);\n</b>
        Put that value into variable as String (or what kind do you need)\n
            <b>String message = editText.getText().toString();\n</b>
        Put that variable to intent object with correct key and related with it variable\n
            <b>intent.putExtra(MESSAGE_KEY, message);\n</b>
        Start new activity\n
            <b>startActivity(intentName);\n</b>

        Create a TextView to read a value\n
        Get the Intent that started this activity and extract the string\n
            <b>Intent intentName = getIntent();\n</b>
            <b>String message = intentName.getStringExtra(MainActivity.MESSAGE_KEY);\n</b>

        Capture the layouts TextView and set the string as its text\n
            <b>TextView textView = (TextView) findViewById(R.id.textView);\n</b>
            <b>textView.setText(message);</b>
    </string>
    <string name="overflow_menu">
        In case of some default themes on each activity,\n
        you cannot see a overflow menu icon\n
        1. Create a menu.xml resource file in /res/menu/\n
        Paste:\n
            <b>item\n
            android:id="@+id/action_function"\n
            android:icon="@drawable/icon"\n
            android:title="@string/action_string_name"\n
            app:showAsAction="ifRoom"/\n</b>
        2. Put a below method in activity where you want a overflow menu \n
            <b>public boolean onCreateOptionsMenu(Menu menu) {</b> \n
            <b>MenuInflater inflater = getMenuInflater();</b> \n
            <b>inflater.inflate(R.menu.menu, menu);</b> \n
            <b>return true;</b> \n
        }
    </string>
    <string name="create_new_toast">
        Simply toast with some options: \n
        <b>Toast toast = new Toast(getApplicationContext());</b> \n
        <b>toast.setGravity(Gravity.CENTER_VERTICAL, 0, 0);</b> \n
        <b>toast.setDuration(Toast.LENGTH_LONG);</b> \n
        <b>toast.setView(layout);</b> \n
        <b>toast.show();</b> \n
        \n
        Default toast on middle of screen: \n
        <b>Toast.makeText(getApplicationContext(), &quot;text&quot;, Toast.LENGTH_LONG).show();</b>
    </string>
    <string name="create_splash_screen">
        Set a static value (display time in miliseconds)\n
        \n
        <b>public static int SPLASH_TIME_OUT = 3000;</b>\n
        \n
        Write on onCreate method:\n
        \n
        <b>new Handler().postDelayed(new Runnable() {</b>\n
        <b>@Override</b>\n
        <b>public void run() {</b>\n
        <b>Intent splashIntent = new Intent(SplashScreen.this, MainMenu.class);</b>\n
        <b>startActivity(splashIntent);</b>\n
        <b>finish();</b>\n
        <b>}</b>\n
        <b>},SPLASH_TIME_OUT);</b>\n
    </string>
    <string name="fragment_1_description">
        On mainActivity class create onClick method:\n
        <b>Fragment fragment;\n
        if (view == findViewById(R.id.fragment_btn1)){\n
        fragment = new FragmentOne();\n
        FragmentManager FM = getFragmentManager();\n
        FragmentTransaction FT = FM.beginTransaction();\n
        FT.replace(R.id.fragment_placement, fragment);\n
        FT.commit();\n
        }\n
        if (view == findViewById(R.id.fragment_btn2)){\n
        fragment = new FragmentTwo();\n
        FragmentManager FM = getFragmentManager();\n
        FragmentTransaction FT = FM.beginTransaction();\n
        FT.replace(R.id.fragment_placement, fragment);\n
        FT.commit();\n
        }</b>\n
        \n
        <b>fragment_btn1</b> &amp; <b>fragment_btn2</b> are buttons id.\n
        <b>fragment_placement</b> is mainActivity any layout id.\n
        classes <b>FragmentOne</b> &amp; <b>FragmentTwo</b> are fragment classes connected with fragment layouts.
    </string>
    <string name="fragment_2_description">
        In mainActivity layout create 2 buttons and any layout to contain both fragments.\n
        Set buttons ids like from Part 1 and layout id the same.\n
    </string>
    <string name="fragment_3_description">
        Create two classes (<b>FragmentOne</b> &amp; <b>FragmentTwo</b>) that extends <b>FragmentM</b> class\n
        and change <b>onCreate</b> method:\n
        <b>@Nullable\n
        @Override\n
        public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, Bundle savedInstanceState) {\n
        return inflater.inflate(R.layout.fragment_lesson_part_1, container, false);\n
        }</b>\n
        \n
        Where <b>fragment_lesson_part_1</b> is related to class layout name (each fragment 1 and 2)
    </string>
    <string name="fragment_4_description">
        On fragments layout put any different values to recognise different fragments.\n
    </string>
</resources>