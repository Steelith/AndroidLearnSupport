<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="textFromFile">
    	Create a new resources .xml file in /res/values like a copy of strings.xml\n
    	put a new resource with known parameter, like "textFromFile" and later yours text\n
        Assign a value "textView" to our textBox in xml\n
            <b>TextView textView = (TextView) findViewById(R.id.defaultText);</b>\n
        Set value "textView" from file to our object.\n
            <b>textView.setText(R.string.textFromFile);</b>\n
    </string>
    <string name="Assign_method_to_button">
        Create a method in desired activity\n
        Find in .xml properties and options "onClick" on button\n
        Choose created method.\n
    </string>
    <string name="open_new_activity">
        Create method which opens ActivityName\n
            <b>public void methodName (View view) {</b>\n
            <b>Intent intentName = new Intent(this, ActivityName.class);</b>\n
            <b>startActivity(intentName);</b>\n
        Apply this method to onClick properties in .xml\n
    </string>
    <string name="remember_values_from_activity">
        In main activity create constant to hold string code (to recognise each values)\n
            <b>public static final String MESSAGE_KEY = "Value from main activity";\n</b>
        Create intent to open new activity\n
            <b>Intent intentName = new Intent(this, ActivityName.class);\n</b>
        Read value from main activity to some EditText\n
            <b>EditText editText = (EditText) findViewById(R.id.editText);\n</b>
        Put that value into variable as String (or what kind do you need)\n
            <b>String message = editText.getText().toString();\n</b>
        Put that variable to intent object with correct key and related with it variable\n
            <b>intent.putExtra(MESSAGE_KEY, message);\n</b>
        Start new activity\n
            <b>startActivity(intentName);\n</b>

        Create a TextView to read a value\n
        Get the Intent that started this activity and extract the string\n
            <b>Intent intentName = getIntent();\n</b>
            <b>String message = intentName.getStringExtra(MainActivity.MESSAGE_KEY);\n</b>

        Capture the layouts TextView and set the string as its text\n
            <b>TextView textView = (TextView) findViewById(R.id.textView);\n</b>
            <b>textView.setText(message);</b>
    </string>
    <string name="overflow_menu">
        In case of some default themes on each activity,\n
        you cannot see a overflow menu icon\n
        1. Create a menu.xml resource file in /res/menu/\n
        Paste:\n
            <b>item\n
            android:id="@+id/action_function"\n
            android:icon="@drawable/icon"\n
            android:title="@string/action_string_name"\n
            app:showAsAction="ifRoom"/\n</b>
        2. Put a below method in activity where you want a overflow menu \n
            <b>public boolean onCreateOptionsMenu(Menu menu) {</b> \n
            <b>MenuInflater inflater = getMenuInflater();</b> \n
            <b>inflater.inflate(R.menu.menu, menu);</b> \n
            <b>return true;</b> \n
        }
    </string>
    <string name="create_new_toast">
        Simply toast with some options: \n
        <b>Toast toast = new Toast(getApplicationContext());</b> \n
        <b>toast.setGravity(Gravity.CENTER_VERTICAL, 0, 0);</b> \n
        <b>toast.setDuration(Toast.LENGTH_LONG);</b> \n
        <b>toast.setView(layout);</b> \n
        <b>toast.show();</b> \n
        \n
        Default toast on middle of screen: \n
        <b>Toast.makeText(getApplicationContext(), &quot;text&quot;, Toast.LENGTH_LONG).show();</b>
    </string>
    <string name="create_splash_screen">
        Set a static value (display time in miliseconds)\n
        \n
        <b>public static int SPLASH_TIME_OUT = 3000;</b>\n
        \n
        Write on onCreate method:\n
        \n
        <b>new Handler().postDelayed(new Runnable() {</b>\n
        <b>@Override</b>\n
        <b>public void run() {</b>\n
        <b>Intent splashIntent = new Intent(SplashScreen.this, MainMenu.class);</b>\n
        <b>startActivity(splashIntent);</b>\n
        <b>finish();</b>\n
        <b>}</b>\n
        <b>},SPLASH_TIME_OUT);</b>\n
    </string>
    <string name="fragment_1_description">
        On mainActivity class create onClick method:\n
        <b>Fragment fragment;\n
        if (view == findViewById(R.id.fragment_btn1)){\n
        fragment = new FragmentOne();\n
        FragmentManager FM = getFragmentManager();\n
        FragmentTransaction FT = FM.beginTransaction();\n
        FT.replace(R.id.fragment_placement, fragment);\n
        FT.commit();\n
        }\n
        if (view == findViewById(R.id.fragment_btn2)){\n
        fragment = new FragmentTwo();\n
        FragmentManager FM = getFragmentManager();\n
        FragmentTransaction FT = FM.beginTransaction();\n
        FT.replace(R.id.fragment_placement, fragment);\n
        FT.commit();\n
        }</b>\n
        \n
        <b>fragment_btn1</b> &amp; <b>fragment_btn2</b> are buttons id.\n
        <b>fragment_placement</b> is mainActivity any layout id.\n
        classes <b>FragmentOne</b> &amp; <b>FragmentTwo</b> are fragment classes connected with fragment layouts.
    </string>
    <string name="fragment_2_description">
        In mainActivity layout create 2 buttons and any layout to contain both fragments.\n
        Set buttons ids like from Part 1 and layout id the same.\n
    </string>
    <string name="fragment_3_description">
        Create two classes (<b>FragmentOne</b> &amp; <b>FragmentTwo</b>) that extends <b>FragmentM</b> class\n
        and change <b>onCreate</b> method:\n
        <b>@Nullable\n
        @Override\n
        public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, Bundle savedInstanceState) {\n
        return inflater.inflate(R.layout.fragment_lesson_part_1, container, false);\n
        }</b>\n
        \n
        Where <b>fragment_lesson_part_1</b> is related to class layout name (each fragment 1 and 2)
    </string>
    <string name="fragment_4_description">
        On fragments layout put any different values to recognise different fragments.\n
    </string>
    <string name="gitbash_description">
        GitBash basic commands to add new files to repository:\n
        \n
        <b>cd /d/projectName\n
        \n
        git init\n
        \n
        git add .\n
        \n
        git commit -m &quot;Update text&quot;\n
        \n
        git push origin master</b>\n
        \n
        \n
        Additional commands:\n
        \n
        <b>git status\n
        exit</b>
    </string>
    <string name="shared_preferences_description">
        Declare on class:\n
        <b>EditText usernameInput;\n
        EditText passwordInput;\n
        TextView dataOutput;</b>\n
        \n
        Bind views in onCreate method:\n
        <b>usernameInput = (EditText) findViewById(R.id.SPusernameInput);\n
        passwordInput = (EditText) findViewById(R.id.SPpasswordInput);\n
        dataOutput = (TextView) findViewById(R.id.SPdisplayText);\n</b>
        \n
        Create 2 buttons, one to save values, other to load them:\n
        <b>public void saveSharedPreferences(View view) {\n
        android.content.SharedPreferences sharedPref = getSharedPreferences("UserInfo", Context.MODE_PRIVATE);\n
        \n
        android.content.SharedPreferences.Editor editor = sharedPref.edit();\n
        editor.putString("username", usernameInput.getText().toString());\n
        editor.putString("password", passwordInput.getText().toString());\n
        editor.apply();\n
        \n
        Toast.makeText(getApplicationContext(),"User data saved!", Toast.LENGTH_SHORT).show();\n
        }\n
        public void loadSharedPreferences(View view) {\n
        android.content.SharedPreferences sharedPref = getSharedPreferences("UserInfo", Context.MODE_PRIVATE);\n
        \n
        String name = sharedPref.getString("username", "Save username first");\n
        String pw = sharedPref.getString("password", "Save password first");\n
        \n
        dataOutput.setText("Username: " + name + ", Password: " + pw);\n
    }</b>
    </string>
    <string name="saveFile_description1">
        Create 2 buttons - to save and load text and 2 objects - EditText to write and TextView to read.\n
        Create on class each objects:\n
        <b>EditText saveFileEditText;\n
        TextView saveFileViewText;\n</b>
        \n
        Throw texts to EditText and TextView in onCreate method:\n
        <b>saveFileEditText = (EditText)findViewById(R.id.saveFileEditText);\n
        saveFileViewText = (TextView)findViewById(R.id.saveFileViewText);\n</b>
        \n
        Also create a related methods to each save and load button:
    </string>
    <string name="saveFile_description2">
        <b>public void saveFileSave(View view){\n
        String MessageText = saveFileEditText.getText().toString();\n
         try {\n
             FileOutputStream fileOutputStream = openFileOutput("messagetext.txt", MODE_PRIVATE);\n
             fileOutputStream.write(MessageText.getBytes());\n
             fileOutputStream.close();\n
             Toast.makeText(this, "File saved", Toast.LENGTH_SHORT).show();\n
             saveFileEditText.setText("");\n
            \n
         } catch (FileNotFoundException e) {\n
             e.printStackTrace();\n
         } catch (IOException e) {\n
             e.printStackTrace();\n
         }\n
     }\n</b>
    </string>
    <string name="saveFile_description3">
        <b>public void saveFileLoad(View view){\n
         try {\n
             FileInputStream fileInputStream = openFileInput("messagetext.txt");\n
             InputStreamReader inputStreamReader = new InputStreamReader(fileInputStream);\n
             BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n
             StringBuilder stringBuilder = new StringBuilder();\n
             String lines;\n
            \n
             while((lines=bufferedReader.readLine())!=null){\n
                stringBuilder.append(lines+"\n");\n
             }\n
             saveFileViewText.setText(stringBuilder.toString());\n
         } catch (FileNotFoundException e) {\n
             e.printStackTrace();\n
         } catch (IOException e) {\n
             e.printStackTrace();\n
         }\n
     }</b>
    </string>
    <string name="scrolling_text_description">
        1st method - only one TextView will be scrollable:\n
        \n
        Add scrollbars on layout xml file:\n
        <b>android:scrollbars = "vertical"</b>\n
        Create it in class where it is:\n
        <b>TextView yourTextView;</b>\n
        Bind it to related TextView id:\n
        <b>yourTextView = (TextView) findViewById(R.id.yourTextViewId);</b>\n
        At the end, write in onCreate method:\n
        <b>yourTextView.setMovementMethod(new ScrollingMovementMethod());</b>\n
        \n
        2nd method - put all objects on any layout and put this layout between ScrollView brackets.\n
        \n
        ScrollView\n
        _____LinearLayout\n
        _________Button\n
        ____________Just button\n
        _________/Button\n
        _________TextView\n
        ____________Just TextView\n
        _________/TextView\n
        ____/LinearLayout\n
        /ScrollView\n
        \n
        Scroll down to see end of description\n
        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
        Both, button and textview will be scrollable in linear layouts borders.\n
    </string>
    <string name="free_test_space">
        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
        test\n
    </string>
    <string name="sending_user_somewhere_else">
        Main source of information about sending user to other application is inside of Intent.\n
        Put any necessary text into String:\n
        \n
        <b>Uri parsedElement = Uri.parse(someString);\n
        Intent intentName = new Intent(Intent.ACTION_DIAL, parsedElement);</b>\n
        \n
        <b>ACTION_DIAL</b> is for dialing a number;\n
        <b>ACTION_VIEW</b> is for view e.g. map;\n
        <b>ACTION_SEND</b> sends e.g. mail;\n
        \n
        We have declared Intent, now we need to check that there is application available to handle that intent.\n
        In the same time we will give user possibility to choose desired application for that intent.\n
        \n
        <b>try {\n
            startActivity(Intent.createChooser(emailIntent, &quot;Pick an email client&quot;));\n
        } catch (ActivityNotFoundException e) {\n
            Toast.makeText(this, &quot;There is no email clients installed&quot;, Toast.LENGTH_SHORT).show();\n
        }</b>\n
        \n
        If we would not like to check it we can just start intent, but if there is not any application our app will crash.\n
        \n
        <b>startActivity(intentName);</b>\n
    </string>
    <string name="gps_activity_description">
     Bind method to activity button, it allows to get a permission to GPS location:\n
        <b>public void locationActivation (View view) {\n
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION)\n
                != PackageManager.PERMISSION_GRANTED) {\n
            Toast.makeText(this, "Access to location services denied.", Toast.LENGTH_SHORT).show();\n
        } else {\n
                LocationManager lom = (LocationManager) getSystemService(Context.LOCATION_SERVICE);\n
                lom.requestLocationUpdates(LocationManager.GPS_PROVIDER, 3000, 10, this);\n
        }\n
    }\n
\n</b>
        Override already prepared location methods:\n
    <b>@Override\n
    public void onLocationChanged (Location location){\n
        double latitude = location.getLatitude();\n
        double longitude = location.getLongitude();\n
        \n
        Toast.makeText(this, "Latitude is: " + latitude + "\nLongitude is: " + longitude, Toast.LENGTH_SHORT).show();\n
        String locationIntentData = "geo:" + latitude + "," + longitude;\n
        \n
        Intent locationIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(locationIntentData));\n
        startActivity(locationIntent);\n
    }\n</b>
    Methods responsible for gps activation and deactivation:\n
    <b>@Override\n
    public void onStatusChanged (String provider, int status, Bundle extras){\n
    }\n
        \n
    @Override\n
    public void onProviderEnabled (String provider){\n
        Toast.makeText(this, "GPS enabled!", Toast.LENGTH_SHORT).show();\n
    }\n
        \n
    @Override\n
    public void onProviderDisabled (String provider){\n
        Toast.makeText(this, "GPS disabled!", Toast.LENGTH_SHORT).show();\n
    }\n</b>
    </string>
    <string name="snackbar_description">
         Just bind a method to button or to whatever action: \n\n
            <b> public void snackbarPopUp (View view){\n
        Snackbar mySnackbar = Snackbar.make(findViewById(R.id.layoutId), "text", Snackbar.LENGTH_SHORT);\n
        mySnackbar.show();\n
    }\n</b>
    </string>
    <string name="fab_description">
        In onCreate method assign a fab with simple OnClickListener, the same like button or view:\n
        \n
        <b>FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab_button_id);\n
        fab.setOnClickListener(new View.OnClickListener() {\n
            @Override\n
            public void onClick(View view) {\n
                Snackbar.make(view, "your text or any action", Snackbar.LENGTH_LONG)\n
                        .setAction("Action", null).show();\n
            }\n
        });</b>
    </string>
    <string name="alert_dialog_description">
        Create an object:\n
        <b>AlertDialog.Builder alert = new AlertDialog.Builder(this);</b>\n
        \n
        After that you can change a different parameters of Alert Dialog like:\n
        \n
        <b>alert.setTitle("Game Over");</b>\n
        <b>alert.setCancelable(false);</b>\n
        <b>alert.setMessage("I completed the test!");</b>\n
        \n
        You can create an action in window merged with onClickListener:\n
        <b>alert.setPositiveButton("Close Application", new DialogInterface.OnClickListener() {</b>\n
                   <b>@Override</b>\n
                    <b>public void onClick(DialogInterface dialog, int which) {</b>\n
                        <b>finish();</b>\n
                    <b>}</b>\n
                <b>});</b>\n
        \n
        After set up Alert Dialog have to be shown (like a Toast):\n
        <b>alert.show();</b>
    </string>
</resources>